// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProtoProject.API.Data;

#nullable disable

namespace ProtoProject.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230607133852_seqmigration")]
    partial class seqmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProtoProject.API.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<int?>("CardGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("CardSequenceId")
                        .HasColumnType("int");

                    b.Property<int?>("Completion")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocFolderId")
                        .HasColumnType("int");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<int?>("ImageFolderId")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LinkFolderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NextCardId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousCardId")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CardId");

                    b.HasIndex("CardGroupId");

                    b.HasIndex("CardSequenceId");

                    b.HasIndex("NextCardId")
                        .IsUnique()
                        .HasFilter("[NextCardId] IS NOT NULL");

                    b.HasIndex("PreviousCardId")
                        .IsUnique()
                        .HasFilter("[PreviousCardId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("ProtoProject.API.Models.CardGroup", b =>
                {
                    b.Property<int>("CardGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardGroupId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CardGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("CardGroups");
                });

            modelBuilder.Entity("ProtoProject.API.Models.CardSequence", b =>
                {
                    b.Property<int>("CardSequenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardSequenceId"));

                    b.Property<string>("CardSequenceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardSequenceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartCardCardId")
                        .HasColumnType("int");

                    b.Property<int>("StartCardId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CardSequenceId");

                    b.HasIndex("StartCardCardId");

                    b.HasIndex("UserId");

                    b.ToTable("CardSequences");
                });

            modelBuilder.Entity("ProtoProject.API.Models.DocFolder", b =>
                {
                    b.Property<int>("DocFolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocFolderId"));

                    b.Property<string>("BlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("ContainerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocFolderId");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.ToTable("DocFolders");
                });

            modelBuilder.Entity("ProtoProject.API.Models.Friendship", b =>
                {
                    b.Property<int>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendshipId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FUserId")
                        .HasColumnType("int");

                    b.Property<int>("SUserId")
                        .HasColumnType("int");

                    b.HasKey("FriendshipId");

                    b.HasIndex("FUserId");

                    b.HasIndex("SUserId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("ProtoProject.API.Models.ImageFolder", b =>
                {
                    b.Property<int>("ImageFolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageFolderId"));

                    b.Property<string>("BlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("ContainerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageFolderId");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.ToTable("ImageFolders");
                });

            modelBuilder.Entity("ProtoProject.API.Models.LinkFolder", b =>
                {
                    b.Property<int>("LinkFolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkFolderId"));

                    b.Property<string>("BlobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("ContainerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LinkFolderId");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.ToTable("LinkFolders");
                });

            modelBuilder.Entity("ProtoProject.API.Models.ShareHash", b =>
                {
                    b.Property<int>("ShareHashId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShareHashId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShareHashId");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.ToTable("ShareHashes");
                });

            modelBuilder.Entity("ProtoProject.API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProtoProject.API.Models.UserGroup", b =>
                {
                    b.Property<int>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserGroupId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserGroupId");

                    b.HasIndex("AdminId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.Property<int>("UserGroupsUserGroupId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("UserGroupsUserGroupId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("UserUserGroup", (string)null);
                });

            modelBuilder.Entity("ProtoProject.API.Models.Card", b =>
                {
                    b.HasOne("ProtoProject.API.Models.CardGroup", "CardGroup")
                        .WithMany("Cards")
                        .HasForeignKey("CardGroupId");

                    b.HasOne("ProtoProject.API.Models.CardSequence", null)
                        .WithMany("Cards")
                        .HasForeignKey("CardSequenceId");

                    b.HasOne("ProtoProject.API.Models.Card", "NextCard")
                        .WithOne()
                        .HasForeignKey("ProtoProject.API.Models.Card", "NextCardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProtoProject.API.Models.Card", "PreviousCard")
                        .WithOne()
                        .HasForeignKey("ProtoProject.API.Models.Card", "PreviousCardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProtoProject.API.Models.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardGroup");

                    b.Navigation("NextCard");

                    b.Navigation("PreviousCard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProtoProject.API.Models.CardGroup", b =>
                {
                    b.HasOne("ProtoProject.API.Models.User", "User")
                        .WithMany("CardGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProtoProject.API.Models.CardSequence", b =>
                {
                    b.HasOne("ProtoProject.API.Models.Card", "StartCard")
                        .WithMany()
                        .HasForeignKey("StartCardCardId");

                    b.HasOne("ProtoProject.API.Models.User", "User")
                        .WithMany("CardSequences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StartCard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProtoProject.API.Models.DocFolder", b =>
                {
                    b.HasOne("ProtoProject.API.Models.Card", "Card")
                        .WithOne("DocFolder")
                        .HasForeignKey("ProtoProject.API.Models.DocFolder", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("ProtoProject.API.Models.Friendship", b =>
                {
                    b.HasOne("ProtoProject.API.Models.User", "FUser")
                        .WithMany("Friendships")
                        .HasForeignKey("FUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProtoProject.API.Models.User", "SUser")
                        .WithMany()
                        .HasForeignKey("SUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FUser");

                    b.Navigation("SUser");
                });

            modelBuilder.Entity("ProtoProject.API.Models.ImageFolder", b =>
                {
                    b.HasOne("ProtoProject.API.Models.Card", "Card")
                        .WithOne("ImageFolder")
                        .HasForeignKey("ProtoProject.API.Models.ImageFolder", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("ProtoProject.API.Models.LinkFolder", b =>
                {
                    b.HasOne("ProtoProject.API.Models.Card", "Card")
                        .WithOne("LinkFolder")
                        .HasForeignKey("ProtoProject.API.Models.LinkFolder", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("ProtoProject.API.Models.ShareHash", b =>
                {
                    b.HasOne("ProtoProject.API.Models.Card", "Card")
                        .WithOne("ShareHash")
                        .HasForeignKey("ProtoProject.API.Models.ShareHash", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("ProtoProject.API.Models.UserGroup", b =>
                {
                    b.HasOne("ProtoProject.API.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("UserUserGroup", b =>
                {
                    b.HasOne("ProtoProject.API.Models.UserGroup", null)
                        .WithMany()
                        .HasForeignKey("UserGroupsUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProtoProject.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProtoProject.API.Models.Card", b =>
                {
                    b.Navigation("DocFolder");

                    b.Navigation("ImageFolder");

                    b.Navigation("LinkFolder");

                    b.Navigation("ShareHash");
                });

            modelBuilder.Entity("ProtoProject.API.Models.CardGroup", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("ProtoProject.API.Models.CardSequence", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("ProtoProject.API.Models.User", b =>
                {
                    b.Navigation("CardGroups");

                    b.Navigation("CardSequences");

                    b.Navigation("Cards");

                    b.Navigation("Friendships");
                });
#pragma warning restore 612, 618
        }
    }
}
